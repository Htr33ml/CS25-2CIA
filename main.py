import streamlit as st
import pandas as pd
import gspread
import json
import os
import sys
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import hashlib

# üîπ Configura√ß√£o do Google Sheets usando a vari√°vel de ambiente para as credenciais
scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]

creds_json = os.getenv('GOOGLE_SHEET_CREDENTIALS_JSON')
if not creds_json:
    sys.exit("Erro: A vari√°vel de ambiente 'GOOGLE_SHEET_CREDENTIALS_JSON' n√£o est√° definida.")

creds_dict = json.loads(creds_json)  # Carregar como dicion√°rio JSON
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# üîπ Acessando as planilhas
# Planilha principal com os dados dos conscritos (aba 1)
sheet = client.open("Relat√≥rio de Conscritos").sheet1
# Planilha com os usu√°rios para login (aba "Usuarios")
users_sheet = client.open("Relat√≥rio de Conscritos").worksheet("Usuarios")

# üîπ Fun√ß√µes de autentica√ß√£o e login

def hash_senha(senha):
    return hashlib.sha256(senha.strip().encode()).hexdigest()

def autenticar_usuario(usuario, senha):
    usuarios = users_sheet.get_all_values()
    if len(usuarios) < 2:
        return False
    df_usuarios = pd.DataFrame(usuarios[1:], columns=usuarios[0])
    df_usuarios = df_usuarios.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    if usuario not in df_usuarios['usuario'].values:
        return False
    user_row = df_usuarios[df_usuarios['usuario'] == usuario].iloc[0]
    senha_digitada_hash = hash_senha(senha)
    if user_row['senha'] == senha_digitada_hash:
        return True
    if user_row['senha'] == senha:
        # Atualiza a senha para hash, se estiver armazenada em texto puro
        linha_usuario = df_usuarios.index[df_usuarios['usuario'] == usuario][0] + 2
        users_sheet.update_cell(linha_usuario, 2, senha_digitada_hash)
        return True
    return False

def login():
    st.title("Login - Sele√ß√£o Complementar 2025")
    usuario = st.text_input("Usu√°rio:")
    senha = st.text_input("Senha:", type="password")
    if st.button("Entrar"):
        if autenticar_usuario(usuario, senha):
            st.session_state['usuario'] = usuario
            st.session_state['logado'] = True
            data_hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            users_sheet.append_row([usuario, data_hora])
            st.success(f"Bem-vindo, {usuario}!")
            st.rerun()  # Substitu√≠do st.experimental_rerun() por st.rerun()
        else:
            st.error("Usu√°rio ou senha incorretos. Tente novamente.")

# üîπ Verifica se o usu√°rio est√° logado. Se n√£o, mostra a tela de login e interrompe a execu√ß√£o.
if "logado" not in st.session_state or not st.session_state["logado"]:
    login()
    st.stop()

# üîπ Inicializando a lista de conscritos no estado da sess√£o
if "conscritos" not in st.session_state:
    st.session_state.conscritos = []

# üîπ Peso para men√ß√µes
peso_mencao = {
    "Excelente": 10,
    "Muito Bom": 8,
    "Bom": 6,
    "Regular": 4,
    "Insuficiente": 0
}

# üîπ Fun√ß√£o para coletar dados de cada conscrito
def coletar_dados():
    st.subheader("Cadastro de Conscritos")
    nome = st.text_input("Nome do conscrito:")
    if not nome:
        st.warning("Por favor, preencha o nome do conscrito.")
        return

    # Perguntas em layout de colunas
    col1, col2 = st.columns(2)
    with col1:
        obeso = st.radio("√â obeso?", ("Sim", "N√£o"))
        passou_saude = st.radio("Passou na sa√∫de?‚õëÔ∏è", ("Sim", "N√£o"))
        passou_teste_fisico = st.radio("Passou no teste f√≠sico?üèÉ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è", ("Sim", "N√£o"))
        men√ß√£o = st.selectbox("Men√ß√£o na entrevista:", ["Excelente", "Muito Bom", "Bom", "Regular", "Insuficiente"])
        contra_indicado = st.radio("√â contra indicado?üö®", ("Sim", "N√£o"))
    with col2:
        apto_instrucao = st.radio("Apto pela equipe de instru√ß√£o?", ("Sim", "N√£o"))
        habilidades = st.number_input("Habilidades (quantidade):", min_value=0, max_value=10)
        habilidades_descricao = st.text_area("Quais habilidades? (Descreva)")

    # Verifica√ß√£o de reprova√ß√£o
    status = "Apto"
    if obeso == "Sim":
        status = "Inapto - Obesidade"
    elif passou_saude == "N√£o":
        status = "Inapto - Sa√∫de"
    elif passou_teste_fisico == "N√£o":
        status = "Inapto - Teste F√≠sico"
    elif contra_indicado == "Sim":
        status = "Inapto - Contraindicado"
    elif apto_instrucao == "N√£o":
        status = "Inapto - N√£o Apto pela Instru√ß√£o"

    # Se o conscrito n√£o tiver habilidades, colocar "-"
    habilidades_str = str(habilidades) if habilidades > 0 else "-"
    habilidades_descricao = habilidades_descricao if habilidades > 0 else "-"

    # Verificar se o conscrito j√° foi registrado para evitar duplica√ß√µes
    conscritos_existentes = [c[0] for c in st.session_state.conscritos]
    if nome in conscritos_existentes:
        st.warning(f"O conscrito {nome} j√° foi registrado.")
        return

    # Criar bot√£o "Gravar"
    gravar = st.button("ü¶ÖGravarü¶Ö")

    if gravar:
        # Salvar no Google Sheets com 6 colunas
        sheet.append_row([nome, men√ß√£o, habilidades_str, habilidades_descricao, peso_mencao[men√ß√£o], status])
        # Atualizar a lista de conscritos na sess√£o
        st.session_state.conscritos.append((nome, men√ß√£o, habilidades_str, habilidades_descricao, peso_mencao[men√ß√£o], status))
        st.success(f"‚úÖ Dados de {nome} salvos com sucesso!")

# üîπ Fun√ß√£o para exibir os conscritos organizados por pelot√£o
def exibir_conscritos():
    # Buscar os dados salvos no Google Sheets (ignorando cabe√ßalho)
    conscritos = sheet.get_all_values()[1:]

    # Ordenar conscritos: primeiro pela men√ß√£o (peso), depois pelo status (Apto/Inapto) e, por fim, por ordem alfab√©tica
    conscritos_ordenados = sorted(conscritos, key=lambda x: (
        peso_mencao.get(x[1], 0),
        x[5] == "Apto",
        x[0]
    ), reverse=True)
    pelotao_1 = [c for c in conscritos_ordenados if c[0][0].upper() in "ABCDE"]
    pelotao_2 = [c for c in conscritos_ordenados if c[0][0].upper() in "FGHIJ"]

    colunas = ["Nome", "Men√ß√£o", "Habilidades", "Quais Habilidades", "Peso da Men√ß√£o", "Situa√ß√£o"]

    # Exibir a tabela do 1¬∫ Pelot√£o
    st.subheader("1¬∫ Pelot√£o (A a E)")
    pelotao_1_df = pd.DataFrame(pelotao_1, columns=colunas)
    pelotao_1_df['Situa√ß√£o'] = pelotao_1_df['Situa√ß√£o'].apply(lambda x: "Inapto" if "Inapto" in x else "Apto")
    st.table(pelotao_1_df.style.apply(
        lambda x: ['background-color: lightcoral' if 'Inapto' in v else 'background-color: lightgreen' if 'Apto' in v else '' for v in x], 
        axis=1
    ))

    # Exibir a tabela do 2¬∫ Pelot√£o
    st.subheader("2¬∫ Pelot√£o (F a J)")
    pelotao_2_df = pd.DataFrame(pelotao_2, columns=colunas)
    pelotao_2_df['Situa√ß√£o'] = pelotao_2_df['Situa√ß√£o'].apply(lambda x: "Inapto" if "Inapto" in x else "Apto")
    st.table(pelotao_2_df.style.apply(
        lambda x: ['background-color: lightcoral' if 'Inapto' in v else 'background-color: lightgreen' if 'Apto' in v else '' for v in x], 
        axis=1
    ))

# üîπ Fun√ß√£o para gerar relat√≥rio CSV (Excel)
def gerar_relatorio_pelotao(pelotao):
    conscritos = sheet.get_all_values()[1:]
    colunas = ["Nome", "Men√ß√£o", "Habilidades", "Quais Habilidades", "Peso da Men√ß√£o", "Situa√ß√£o"]

    conscritos_ordenados = sorted(conscritos, key=lambda x: (
        peso_mencao.get(x[1], 0),
        x[5] == "Apto",
        x[0]
    ), reverse=True)

    if pelotao == 1:
        conscritos_filtrados = [c for c in conscritos_ordenados if c[0][0].upper() in "ABCDE"]
    else:
        conscritos_filtrados = [c for c in conscritos_ordenados if c[0][0].upper() in "FGHIJ"]

    df = pd.DataFrame(conscritos_filtrados, columns=colunas)
    excel_file = df.to_csv(index=False).encode('utf-8')
    return excel_file

# üîπ Interface Streamlit - Customiza√ß√£o visual
st.markdown("""
    <style>
    .reportview-container {
        background-color: black;
        color: white;
    }
    h1, h2, h3, h4, h5, h6 {
        color: white;
    }
    .css-ffhzg2 { 
        color: white;
    }
    </style>
""", unsafe_allow_html=True)

st.image('IMG_1118.png', width=60, use_container_width=True)
st.markdown('<h1 style="text-align: center; font-size: 40px; margin-bottom: 5px;">SELE√á√ÉO COMPLEMENTAR 2025</h1>', unsafe_allow_html=True)
st.markdown('<h2 style="text-align: center; margin-top: 0px; margin-bottom: 30px;">2¬™ CIA - TIGRE</h2>', unsafe_allow_html=True)

# Se√ß√£o de cadastro e exibi√ß√£o dos conscritos
coletar_dados()
exibir_conscritos()

# Bot√µes para gerar relat√≥rio (CSV)
st.subheader("Gerar Relat√≥rio")
st.download_button(label="Baixar Relat√≥rio (1¬∫ Pelot√£o)", data=gerar_relatorio_pelotao(1), file_name="relatorio_1pelotao.csv", mime="text/csv")
st.download_button(label="Baixar Relat√≥rio (2¬∫ Pelot√£o)", data=gerar_relatorio_pelotao(2), file_name="relatorio_2pelotao.csv", mime="text/csv")

# Cr√©ditos
st.markdown("""
    <p style="font-size: 10px; color: white; text-align: center;">C√≥digo Python feito por CAP TREMMEL - PQDT 90.360</p>
    <p style="font-size: 10px; color: white; text-align: center;">Qualquer erro, entre em contato: 21 974407682</p>
""", unsafe_allow_html=True)
